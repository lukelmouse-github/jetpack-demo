package com.example.demo.textview;

import android.animation.ValueAnimator;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.example.common.base.BaseFragment;
import com.example.common.log.ALog;
import com.example.common.routers.RouterPath;
import com.example.demo.R;
import com.example.demo.databinding.FragmentTextviewHintBinding;
import com.therouter.router.Route;

@Route(path = RouterPath.TEXTVIEW_HINT, description = "TextView HintÊú∫Âà∂Ê∑±Â∫¶Ëß£Êûê")
public class TextViewHintFragment extends BaseFragment<FragmentTextviewHintBinding> {
    private static final String TAG = "TextViewHint";

    public TextViewHintFragment() {
        super(R.layout.fragment_textview_hint);
    }

    @Override
    protected void initView() {
        super.initView();
        ALog.dd(TAG, "TextViewHintFragment initViewÂºÄÂßã");

        // ÂàõÂª∫Ê†áÈ¢ò
        TextView titleView = new TextView(getContext());
        titleView.setText("üîç TextView HintÊú∫Âà∂Ê∑±Â∫¶Ëß£Êûê");
        titleView.setTextSize(22);
        titleView.setTextColor(Color.BLACK);
        titleView.setPadding(0, 0, 0, 20);
        titleView.setGravity(android.view.Gravity.CENTER);
        binding.main.addView(titleView);

        // Ê∑ªÂä†ÁêÜËÆ∫ËØ¥Êòé
        addTheorySection();
        
        // Ê∑ªÂä†Âü∫Á°ÄhintÊºîÁ§∫
        addBasicHintDemo();
        
        // Ê∑ªÂä†hintÊòæÁ§∫ÈÄªËæëÊºîÁ§∫
        addHintLogicDemo();
        
        // Ê∑ªÂä†hintÁªòÂà∂ÂéüÁêÜÊºîÁ§∫
        addHintDrawDemo();
        
        // Ê∑ªÂä†Ëá™ÂÆö‰πâhintÊºîÁ§∫
        addCustomHintDemo();

        ALog.dd(TAG, "TextViewHintFragment initViewÂÆåÊàê");
    }

    private void addTheorySection() {
        TextView theoryTitle = new TextView(getContext());
        theoryTitle.setText("üìö HintÊú∫Âà∂Ê†∏ÂøÉÂéüÁêÜ");
        theoryTitle.setTextSize(18);
        theoryTitle.setTextColor(Color.BLACK);
        theoryTitle.setPadding(0, 20, 0, 10);
        binding.main.addView(theoryTitle);

        TextView theoryContent = new TextView(getContext());
        theoryContent.setText(
                "1Ô∏è‚É£ HintÊòæÁ§∫Âà§Êñ≠ÈÄªËæëÔºö\n" +
                "   ‚Ä¢ getText().length() == 0 Êó∂ÊòæÁ§∫hint\n" +
                "   ‚Ä¢ ÁÑ¶ÁÇπÁä∂ÊÄÅÂΩ±ÂìçhintÈÄèÊòéÂ∫¶\n" +
                "   ‚Ä¢ hintÊñáÊú¨‰∏∫nullÊó∂‰∏çÁªòÂà∂\n\n" +
                
                "2Ô∏è‚É£ HintÁªòÂà∂Êó∂Êú∫Ôºö\n" +
                "   ‚Ä¢ onDraw()ÊñπÊ≥ï‰∏≠Ë∞ÉÁî®drawHint()\n" +
                "   ‚Ä¢ Âú®‰∏ªÊñáÊú¨ÁªòÂà∂‰πãÂâçÁªòÂà∂hint\n" +
                "   ‚Ä¢ ‰ΩøÁî®mHintLayoutËøõË°åÊñáÊú¨Â∏ÉÂ±Ä\n\n" +
                
                "3Ô∏è‚É£ HintÊ†∑ÂºèÊéßÂà∂Ôºö\n" +
                "   ‚Ä¢ textColorHintÂ±ûÊÄßÊéßÂà∂È¢úËâ≤\n" +
                "   ‚Ä¢ ÁªßÊâø‰∏ªÊñáÊú¨ÁöÑÂ≠ó‰ΩìÂíåÂ§ßÂ∞è\n" +
                "   ‚Ä¢ ÊîØÊåÅSpannableStringÂØåÊñáÊú¨hint\n\n" +
                
                "4Ô∏è‚É£ Hint‰∏éÁÑ¶ÁÇπ‰∫§‰∫íÔºö\n" +
                "   ‚Ä¢ Ëé∑ÂæóÁÑ¶ÁÇπÊó∂hintÂèòÊ∑°\n" +
                "   ‚Ä¢ Â§±ÂéªÁÑ¶ÁÇπÊó∂hintÊÅ¢Â§çÊ≠£Â∏∏\n" +
                "   ‚Ä¢ Âä®ÁîªËøáÊ∏°ÊïàÊûúÂÆûÁé∞"
        );
        theoryContent.setTextSize(14);
        theoryContent.setTextColor(Color.DKGRAY);
        theoryContent.setPadding(10, 0, 10, 20);
        theoryContent.setLineSpacing(6, 1.2f);
        theoryContent.setBackgroundColor(Color.parseColor("#F8F9FA"));
        binding.main.addView(theoryContent);
    }

    private void addBasicHintDemo() {
        TextView sectionTitle = new TextView(getContext());
        sectionTitle.setText("üéØ Âü∫Á°ÄHintÊºîÁ§∫");
        sectionTitle.setTextSize(18);
        sectionTitle.setTextColor(Color.BLACK);
        sectionTitle.setPadding(0, 20, 0, 10);
        binding.main.addView(sectionTitle);

        // ÊôÆÈÄöhint
        EditText normalHint = new EditText(getContext());
        normalHint.setHint("ËøôÊòØÊôÆÈÄöÁöÑhintÊñáÊú¨");
        normalHint.setHintTextColor(Color.GRAY);
        normalHint.setPadding(20, 15, 20, 15);
        normalHint.setBackgroundColor(Color.parseColor("#F0F0F0"));
        binding.main.addView(normalHint);

        // Â§öË°åhint
        EditText multilineHint = new EditText(getContext());
        multilineHint.setHint("ËøôÊòØÂ§öË°åhintÊñáÊú¨\nÁ¨¨‰∫åË°åhint\nÁ¨¨‰∏âË°åhint");
        multilineHint.setHintTextColor(Color.parseColor("#FF6B6B"));
        multilineHint.setSingleLine(false);
        multilineHint.setLines(3);
        multilineHint.setPadding(20, 15, 20, 15);
        multilineHint.setBackgroundColor(Color.parseColor("#FFF0F0"));
        LinearLayout.LayoutParams multiParams = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.MATCH_PARENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        );
        multiParams.setMargins(0, 10, 0, 0);
        multilineHint.setLayoutParams(multiParams);
        binding.main.addView(multilineHint);
    }

    private void addHintLogicDemo() {
        TextView sectionTitle = new TextView(getContext());
        sectionTitle.setText("üî¨ HintÊòæÁ§∫ÈÄªËæëÂàÜÊûê");
        sectionTitle.setTextSize(18);
        sectionTitle.setTextColor(Color.BLACK);
        sectionTitle.setPadding(0, 20, 0, 10);
        binding.main.addView(sectionTitle);

        // ÂàõÂª∫ÂàÜÊûêÁî®ÁöÑEditText
        EditText analysisEdit = new EditText(getContext());
        analysisEdit.setHint("ËæìÂÖ•ÊñáÊú¨ËßÇÂØühintÂèòÂåñ");
        analysisEdit.setHintTextColor(Color.BLUE);
        analysisEdit.setPadding(20, 15, 20, 15);
        analysisEdit.setBackgroundColor(Color.parseColor("#E8F4FD"));
        binding.main.addView(analysisEdit);

        // Áä∂ÊÄÅÊòæÁ§∫TextView
        TextView statusView = new TextView(getContext());
        statusView.setText("Áä∂ÊÄÅÔºöhintÊòæÁ§∫‰∏≠");
        statusView.setTextSize(14);
        statusView.setTextColor(Color.BLACK);
        statusView.setPadding(10, 10, 10, 10);
        statusView.setBackgroundColor(Color.parseColor("#FFFACD"));
        LinearLayout.LayoutParams statusParams = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.MATCH_PARENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        );
        statusParams.setMargins(0, 10, 0, 0);
        statusView.setLayoutParams(statusParams);
        binding.main.addView(statusView);

        // Ê∑ªÂä†ÊñáÊú¨ÂèòÂåñÁõëÂê¨
        analysisEdit.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                ALog.dd(TAG, "beforeTextChanged: s=" + s + ", start=" + start + ", count=" + count + ", after=" + after);
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                ALog.dd(TAG, "onTextChanged: s=" + s + ", start=" + start + ", before=" + before + ", count=" + count);
                
                boolean shouldShowHint = TextUtils.isEmpty(s);
                String status = shouldShowHint ? "hintÊòæÁ§∫‰∏≠" : "hintÈöêËóè‰∏≠";
                statusView.setText("Áä∂ÊÄÅÔºö" + status + " | ÊñáÊú¨ÈïøÂ∫¶Ôºö" + s.length() + " | ÂÜÖÂÆπÔºö\"" + s + "\"");
                
                ALog.dd(TAG, "hintÊòæÁ§∫Âà§Êñ≠: shouldShowHint=" + shouldShowHint + ", textLength=" + s.length());
            }

            @Override
            public void afterTextChanged(Editable s) {
                ALog.dd(TAG, "afterTextChanged: s=" + s);
            }
        });

        // Ê∑ªÂä†ÁÑ¶ÁÇπÂèòÂåñÁõëÂê¨
        analysisEdit.setOnFocusChangeListener((v, hasFocus) -> {
            ALog.dd(TAG, "ÁÑ¶ÁÇπÂèòÂåñ: hasFocus=" + hasFocus);
            String focusStatus = hasFocus ? "Ëé∑ÂæóÁÑ¶ÁÇπ" : "Â§±ÂéªÁÑ¶ÁÇπ";
            statusView.setText(statusView.getText() + " | " + focusStatus);
        });
    }

    private void addHintDrawDemo() {
        TextView sectionTitle = new TextView(getContext());
        sectionTitle.setText("üé® HintÁªòÂà∂ÂéüÁêÜÊºîÁ§∫");
        sectionTitle.setTextSize(18);
        sectionTitle.setTextColor(Color.BLACK);
        sectionTitle.setPadding(0, 20, 0, 10);
        binding.main.addView(sectionTitle);

        // Ëá™ÂÆö‰πâÁªòÂà∂hintÁöÑTextView
        CustomHintTextView customHintView = new CustomHintTextView(getContext());
        customHintView.setHint("Ëá™ÂÆö‰πâÁªòÂà∂ÁöÑhint");
        customHintView.setHintTextColor(Color.parseColor("#FF9800"));
        customHintView.setPadding(20, 15, 20, 15);
        customHintView.setBackgroundColor(Color.parseColor("#FFF8E1"));
        customHintView.setTextSize(16);
        LinearLayout.LayoutParams customParams = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.MATCH_PARENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        );
        customParams.setMargins(0, 10, 0, 0);
        customHintView.setLayoutParams(customParams);
        binding.main.addView(customHintView);

        // Ê∑ªÂä†ÊéßÂà∂ÊåâÈíÆ
        Button toggleButton = new Button(getContext());
        toggleButton.setText("ÂàáÊç¢ÁªòÂà∂Ê®°Âºè");
        toggleButton.setOnClickListener(v -> {
            customHintView.toggleDrawMode();
            ALog.dd(TAG, "ÂàáÊç¢hintÁªòÂà∂Ê®°Âºè");
        });
        LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.WRAP_CONTENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        );
        buttonParams.setMargins(0, 10, 0, 0);
        buttonParams.gravity = android.view.Gravity.CENTER;
        toggleButton.setLayoutParams(buttonParams);
        binding.main.addView(toggleButton);
    }

    private void addCustomHintDemo() {
        TextView sectionTitle = new TextView(getContext());
        sectionTitle.setText("‚ú® Ëá™ÂÆö‰πâHintÊïàÊûú");
        sectionTitle.setTextSize(18);
        sectionTitle.setTextColor(Color.BLACK);
        sectionTitle.setPadding(0, 20, 0, 10);
        binding.main.addView(sectionTitle);

        // ÊµÆÂä®hintÊïàÊûú
        FloatingHintEditText floatingHint = new FloatingHintEditText(getContext());
        floatingHint.setHint("Material DesignÊµÆÂä®hint");
        floatingHint.setHintTextColor(Color.parseColor("#4CAF50"));
        floatingHint.setPadding(20, 30, 20, 15);
        floatingHint.setBackgroundColor(Color.parseColor("#F1F8E9"));
        LinearLayout.LayoutParams floatingParams = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.MATCH_PARENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        );
        floatingParams.setMargins(0, 10, 0, 20);
        floatingHint.setLayoutParams(floatingParams);
        binding.main.addView(floatingHint);
    }

    @Override
    protected void initData() {
        super.initData();
        ALog.dd(TAG, "TextViewHintFragment initData");
    }

    // Ëá™ÂÆö‰πâTextViewÔºåÊºîÁ§∫hintÁªòÂà∂ÂéüÁêÜ
    public static class CustomHintTextView extends androidx.appcompat.widget.AppCompatEditText {
        private boolean customDrawMode = false;
        private Paint hintPaint;

        public CustomHintTextView(Context context) {
            super(context);
            init();
        }

        public CustomHintTextView(Context context, AttributeSet attrs) {
            super(context, attrs);
            init();
        }

        private void init() {
            hintPaint = new Paint();
            hintPaint.setAntiAlias(true);
            hintPaint.setTextSize(getTextSize());
        }

        public void toggleDrawMode() {
            customDrawMode = !customDrawMode;
            invalidate();
        }

        @Override
        protected void onDraw(Canvas canvas) {
            ALog.dd("CustomHintTextView", "onDrawÂºÄÂßã - customDrawMode=" + customDrawMode);
            
            if (customDrawMode && TextUtils.isEmpty(getText()) && !TextUtils.isEmpty(getHint())) {
                // Ëá™ÂÆö‰πâÁªòÂà∂hint
                ALog.dd("CustomHintTextView", "Ëá™ÂÆö‰πâÁªòÂà∂hint: " + getHint());
                
                hintPaint.setColor(getCurrentHintTextColor());
                hintPaint.setTextSize(getTextSize());
                
                // ÁªòÂà∂hintÊñáÊú¨
                String hintText = getHint().toString();
                float x = getPaddingLeft();
                float y = getPaddingTop() + getTextSize();
                
                canvas.drawText(hintText, x, y, hintPaint);
                
                // ÁªòÂà∂ËæπÊ°ÜË°®Á§∫ËøôÊòØËá™ÂÆö‰πâÁªòÂà∂
                hintPaint.setColor(Color.RED);
                hintPaint.setStyle(Paint.Style.STROKE);
                hintPaint.setStrokeWidth(2);
                canvas.drawRect(getPaddingLeft() - 5, getPaddingTop() - 5, 
                               getWidth() - getPaddingRight() + 5, 
                               getHeight() - getPaddingBottom() + 5, hintPaint);
                hintPaint.setStyle(Paint.Style.FILL);
            } else {
                // ‰ΩøÁî®Á≥ªÁªüÈªòËÆ§ÁªòÂà∂
                ALog.dd("CustomHintTextView", "‰ΩøÁî®Á≥ªÁªüÈªòËÆ§ÁªòÂà∂hint");
                super.onDraw(canvas);
            }
            
            ALog.dd("CustomHintTextView", "onDrawÂÆåÊàê");
        }
    }

    // ÊµÆÂä®hintÊïàÊûúÁöÑEditText
    public static class FloatingHintEditText extends androidx.appcompat.widget.AppCompatEditText {
        private Paint floatingHintPaint;
        private ValueAnimator hintAnimator;
        private float hintOffset = 0f;
        private boolean isFloating = false;

        public FloatingHintEditText(Context context) {
            super(context);
            init();
        }

        public FloatingHintEditText(Context context, AttributeSet attrs) {
            super(context, attrs);
            init();
        }

        private void init() {
            floatingHintPaint = new Paint();
            floatingHintPaint.setAntiAlias(true);
            floatingHintPaint.setTextSize(getTextSize() * 0.8f);
            
            addTextChangedListener(new TextWatcher() {
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    boolean shouldFloat = !TextUtils.isEmpty(s);
                    if (shouldFloat != isFloating) {
                        animateHint(shouldFloat);
                    }
                }

                @Override
                public void afterTextChanged(Editable s) {}
            });
        }

        private void animateHint(boolean shouldFloat) {
            ALog.dd("FloatingHintEditText", "animateHint: shouldFloat=" + shouldFloat);
            
            if (hintAnimator != null) {
                hintAnimator.cancel();
            }
            
            float startOffset = hintOffset;
            float endOffset = shouldFloat ? -getTextSize() * 0.8f : 0f;
            
            hintAnimator = ValueAnimator.ofFloat(startOffset, endOffset);
            hintAnimator.setDuration(200);
            hintAnimator.addUpdateListener(animation -> {
                hintOffset = (float) animation.getAnimatedValue();
                invalidate();
            });
            hintAnimator.start();
            
            isFloating = shouldFloat;
        }

        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            
            if (!TextUtils.isEmpty(getHint())) {
                floatingHintPaint.setColor(getCurrentHintTextColor());
                
                String hintText = getHint().toString();
                float x = getPaddingLeft();
                float y = getPaddingTop() + getTextSize() + hintOffset;
                
                if (isFloating) {
                    // ÊµÆÂä®Áä∂ÊÄÅ‰∏ãÁöÑhint
                    floatingHintPaint.setTextSize(getTextSize() * 0.7f);
                    canvas.drawText(hintText, x, y, floatingHintPaint);
                    ALog.dd("FloatingHintEditText", "ÁªòÂà∂ÊµÆÂä®hint: " + hintText + ", offset=" + hintOffset);
                }
            }
        }
    }
}